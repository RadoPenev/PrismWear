@using PrismWear.Common
@using PrismWear.Web.ViewModels.Products
@model SingleProductViewModel

@{
    ViewData["Title"] = Model.Name;
    var productImages = Model.Images ?? new List<PrismWear.Data.Models.Image>();
}

<style>
    /* Product container styles */
    .product-container {
        margin-top: 30px;
        margin-bottom: 60px;
    }

    /* Product image gallery */
    .product-image-gallery {
        background-color: #f8f9fa;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .product-image {
        height: 500px;
        object-fit: contain;
        background-color: #fff;
        padding: 20px;
    }

    /* Product details styles */
    .product-details {
        padding: 20px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .product-title {
        margin-bottom: 5px;
        font-weight: 700;
        color: #333;
    }

    .product-category {
        display: inline-block;
        margin-bottom: 15px;
        color: #6c757d;
        font-size: 0.95rem;
    }

    .product-price {
        font-size: 1.8rem;
        font-weight: 600;
        margin-bottom: 15px;
        color: #3d5af1;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .out-of-stock-label {
        background-color: #dc3545;
        color: white;
        font-size: 0.9rem;
        padding: 5px 10px;
        border-radius: 5px;
        margin-left: 10px;
    }

    .in-stock, .low-stock {
        margin-bottom: 20px;
        display: block;
        font-weight: 500;
    }

    .in-stock {
        color: #28a745;
    }

    .low-stock {
        color: #ffc107;
    }

    .product-description {
        margin-bottom: 25px;
        line-height: 1.6;
        color: #555;
    }

    /* Size options styling */
    .size-options-label {
        display: block;
        margin-bottom: 10px;
        font-weight: 500;
        color: #333;
    }

    .size-options {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 25px;
    }

    .size-btn {
        min-width: 50px;
        border: 2px solid #e0e0e0;
        color: #333;
        background-color: #fff;
        transition: all 0.2s;
    }

        .size-btn:hover:not([disabled]) {
            border-color: #3d5af1;
        }

    .btn-check:checked + .size-btn {
        background-color: #3d5af1;
        color: white;
        border-color: #3d5af1;
    }

    .btn-check:disabled + .size-btn {
        color: #aaa;
        cursor: not-allowed;
        background-color: #f8f8f8;
    }

    /* Quantity control styles */
    .quantity-control {
        margin-bottom: 25px;
    }

    .quantity-label {
        display: block;
        margin-bottom: 10px;
        font-weight: 500;
        color: #333;
    }

    .quantity-wrapper {
        display: flex;
        align-items: center;
        max-width: 150px;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        overflow: hidden;
    }

    .quantity-btn {
        width: 40px;
        height: 40px;
        background: #f8f9fa;
        border: none;
        font-size: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s;
    }

        .quantity-btn:hover {
            background: #e9ecef;
        }

    .quantity-input {
        width: 50px;
        height: 40px;
        text-align: center;
        border: none;
        border-left: 1px solid #e0e0e0;
        border-right: 1px solid #e0e0e0;
        font-weight: 500;
    }

        .quantity-input:focus {
            outline: none;
        }

    /* Add to cart button */
    .add-to-cart-btn {
        width: 100%;
        padding: 12px 20px;
        font-size: 1.1rem;
        font-weight: 600;
        background-color: #3d5af1;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        margin-bottom: 20px;
    }

        .add-to-cart-btn:hover {
            background-color: #2a3eb1;
            transform: translateY(-2px);
        }

    .cart-icon {
        font-size: 1.2rem;
    }

    /* Admin controls */
    .admin-controls {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-top: 20px;
    }

    .edit-btn, .delete-btn {
        padding: 10px;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.3s;
    }

    .edit-btn {
        background-color: #ffc107;
        color: #212529;
        border: none;
    }

        .edit-btn:hover {
            background-color: #e0a800;
        }

    .delete-btn {
        background-color: #dc3545;
        color: white;
        border: none;
    }

        .delete-btn:hover {
            background-color: #c82333;
        }

    /* Cart notification */
    .cart-added-notification {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #28a745;
        color: white;
        padding: 15px 25px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        display: flex;
        align-items: center;
        gap: 15px;
        z-index: 1000;
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.3s;
        visibility: hidden;
    }

        .cart-added-notification.show {
            opacity: 1;
            transform: translateY(0);
            visibility: visible;
        }

    .notification-icon {
        font-size: 24px;
    }
</style>

<div class="container product-container animate__animated animate__fadeIn">
    <div class="row g-4 p-4">
        <div class="col-lg-6">
            <div class="product-image-gallery">
                @if (productImages.Any())
                {
                    <!-- Bootstrap Carousel for Product Images -->
                    <div id="productImageCarousel" class="carousel slide carousel-fade" data-bs-ride="carousel">
                        <div class="carousel-inner">
                            @for (int i = 0; i < productImages.Count; i++)
                            {
                                var image = productImages[i];
                                <div class="carousel-item @(i == 0 ? "active" : "")">
                                    <img src="@($"/images/products/{image.Id}.{image.Extension}")"
                                         alt="@Model.Name - Image @(i + 1)"
                                         class="product-image"
                                         style="width: 100%; height: auto; object-fit: contain;">
                                </div>
                            }
                        </div>

                        @if (productImages.Count > 1)
                        {
                            <button class="carousel-control-prev" type="button" data-bs-target="#productImageCarousel" data-bs-slide="prev" style="opacity: 0; transition: opacity 0.3s;">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Previous</span>
                            </button>
                            <button class="carousel-control-next" type="button" data-bs-target="#productImageCarousel" data-bs-slide="next" style="opacity: 0; transition: opacity 0.3s;">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Next</span>
                            </button>
                        }
                    </div>
                }
            </div>
        </div>
        <div class="col-lg-6">
            <div class="product-details">
                <h1 class="product-title">@Model.Name</h1>
                <span class="product-category">@Model.CategoryName</span>

                <div class="product-price">
                    @Model.Price.ToString("F2") лв.
                    @{
                        var totalStock = Model.Details.Sum(d => d.Quantity);
                        if (totalStock == 0)
                        {
                            <span class="out-of-stock-label">Изчерпан</span>
                        }
                    }
                </div>

                @if (totalStock > 0)
                {
                    <div class="stock-info">
                        @if (totalStock > 10)
                        {
                            <span class="in-stock"><i class="fas fa-check-circle me-1"></i>В наличност</span>
                        }
                        else
                        {
                            <span class="low-stock"><i class="fas fa-exclamation-circle me-1"></i>Последни @totalStock бройки</span>
                        }
                    </div>
                }

                <div class="product-description">
                    @Model.Description
                </div>

                <label class="size-options-label"><i class="fas fa-ruler me-2"></i>Избери размер:</label>
                <div class="size-options">
                    @foreach (var detail in Model.Details)
                    {
                        var isDisabled = detail.Quantity == 0 ? "disabled" : "";

                        <input type="radio" name="size" id="size-@detail.Size" class="btn-check"
                               value="@detail.Size" autocomplete="off" @isDisabled>
                        <label class="btn size-btn" for="size-@detail.Size">
                            @detail.Size
                        </label>
                    }
                </div>

                <div class="quantity-control">
                    <span class="quantity-label"><i class="fas fa-shopping-basket me-2"></i>Количество:</span>
                    <div class="quantity-wrapper">
                        <button type="button" class="quantity-btn decrease-btn">
                            <i class="fas fa-minus"></i>
                        </button>
                        <input type="number" id="quantity" value="1" min="1" max="10" class="quantity-input">
                        <button type="button" class="quantity-btn increase-btn">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>

                <button class="add-to-cart-btn" data-productid="@Model.Id" id="addToCartBtn">
                    <i class="fas fa-shopping-cart cart-icon"></i>
                    Добави в кошницата
                </button>

                @if (User.IsInRole("Admin"))
                {
                    <div class="admin-controls">
                        <a asp-controller="Products" asp-action="Edit" asp-route-id="@Model.Id" class="btn edit-btn">
                            <i class="fas fa-edit"></i> Редактирай
                        </a>
                        <form asp-controller="Products" asp-action="Delete" asp-route-id="@Model.Id" method="post"
                              onsubmit="return confirm('Сигурни ли сте, че искате да изтриете този продукт?');"
                              class="d-inline w-100">
                            <button type="submit" class="btn delete-btn w-100">
                                <i class="fas fa-trash-alt"></i> Изтрий
                            </button>
                        </form>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="cart-added-notification" id="cartNotification">
    <i class="fas fa-check-circle notification-icon"></i>
    <div>
        <strong>Продуктът е добавен в кошницата!</strong>
        <div>Успешно добавихте <span id="addedQuantity">1</span> бр. към вашата кошница.</div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize the carousel
        @if (productImages.Count > 1)
        {
            <text>
                    var productImageCarousel = new bootstrap.Carousel(document.querySelector('#productImageCarousel'), {
                        interval: 3000,
                        ride: true
                    });

                    // Add hover effect for navigation buttons
                    $('#productImageCarousel').hover(
                        function() {
                            $(this).find('.carousel-control-prev, .carousel-control-next').css('opacity', '0.5');
                        },
                        function() {
                            $(this).find('.carousel-control-prev, .carousel-control-next').css('opacity', '0');
                        }
                    );
            </text>
        }

            // Quantity control
            $('.decrease-btn').click(function() {
                var input = $('#quantity');
                var value = parseInt(input.val());
                if (value > 1) {
                    input.val(value - 1);
                }
            });

            $('.increase-btn').click(function() {
                var input = $('#quantity');
                var value = parseInt(input.val());
                if (value < 10) {
                    input.val(value + 1);
                }
            });

            // Prevent manual entry of invalid values
            $('#quantity').on('input', function() {
                var value = parseInt($(this).val());
                if (isNaN(value) || value < 1) {
                    $(this).val(1);
                } else if (value > 10) {
                    $(this).val(10);
                }
            });

            // Add to cart functionality
            $("#addToCartBtn").click(function(e) {
                e.preventDefault();

                var button = $(this);
                var productId = button.data("productid");
                var selectedSize = $("input[name='size']:checked").val();
                var quantity = $("#quantity").val();

                if (!selectedSize) {
                    alert("Моля, изберете размер!");
                    return;
                }

                // Show button is loading
                button.prop('disabled', true);
                button.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Добавяне...');

                $.ajax({
                    type: "POST",
                    url: "/Cart/AddToCart",
                    data: { productId: productId, size: selectedSize, quantity: quantity },
                    success: function(response) {
                        // Update cart count
                        if (response.totalItemCount !== undefined) {
                            $("#cartCount").text(response.totalItemCount);
                        }

                        // Show notification
                        $('#addedQuantity').text(quantity);
                        $('#cartNotification').addClass('show');

                        // Reset button
                        button.prop('disabled', false);
                        button.html('<i class="fas fa-shopping-cart cart-icon"></i> Добави в кошницата');

                        // Hide notification after 3 seconds
                        setTimeout(function() {
                            $('#cartNotification').removeClass('show');
                        }, 3000);
                    },
                    error: function() {
                        alert("Моля, първо влезте в профила си!");

                        // Reset button
                        button.prop('disabled', false);
                        button.html('<i class="fas fa-shopping-cart cart-icon"></i> Добави в кошницата');
                    }
                });
            });
        });
    </script>
}